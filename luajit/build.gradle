import com.badlogic.gdx.jnigen.BuildTarget
import com.badlogic.gdx.utils.Os

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.2'
    }
}

plugins {
    id 'java'
    id 'java-library'
}

repositories {
    mavenCentral()
}

group = rootProject.group
version = rootProject.version

configurations {
    desktopNatives {
        canBeConsumed = true
        canBeResolved = false
    }

    instrumentedJars {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom api, implementation, runtimeOnly
    }
}

dependencies {
    api project(':luajava')
}

enum Platform {
    // Only keep Linux and Windows platforms needed
    Linux64,
    AArch64,
    Win64,
}

// Builds LuaJIT and copies the output libluajit.a to jni/luajit/lib/${platform}
// libluajit.a will be used in linkerConfig
String addLuaJitTarget(Platform platform, List<String> command) {
    String name = platform.toString()
    String target = "buildLua${name}"
    String folder = "jni/luajit/lib/${name.toLowerCase()}"
    tasks.register(target) {
        if (command.get(0) == 'make') {
            doLast {
                exec {
                    workingDir 'jni/luajit'
                    commandLine 'make', 'clean'
                }
                delete {
                    delete fileTree('jni/luajit/src') {
                        include 'libluajit*a'
                    }
                }
                exec {
                    workingDir 'jni/luajit'
                    commandLine command
                }
                copy {
                    from('./jni/luajit/src') {
                        include 'libluajit*a'
                    }
                    into folder
                    rename '(.+)', 'libluajit.a'
                }
            }
        } else {
            doLast {
                exec {
                    workingDir 'jni/luajit'
                    commandLine command
                }
            }
        }
    }
    return target
}

void buildLuaTargets(String... targets) {
    tasks.register('buildLua') {
        dependsOn targets
    }
    // disabling concurrency
    for (int i = 0; i < targets.length - 1; ++i) {
        for (int j = i + 1; j < targets.length; ++j) {
            tasks.getByName(targets[j]).mustRunAfter(tasks.getByName(targets[i]))
        }
    }
}

buildLuaTargets(
        addLuaJitTarget(Platform.Linux64,
                ['make', 'amalg',
                 'CC=gcc -m64 -D_FORTIFY_SOURCE=0', 'CFLAGS=-fPIC ',
                 'TARGET_SYS=Linux']),
        addLuaJitTarget(Platform.AArch64,
                ['make', 'amalg',
                 'HOST_CC=gcc -m64 -D_FORTIFY_SOURCE=0', 'CFLAGS=-fPIC',
                 'TARGET_SYS=Linux', 'CROSS=aarch64-linux-gnu-']),
        addLuaJitTarget(Platform.Win64,
                ['make', 'amalg',
                 'HOST_CC=gcc -m64', 'CFLAGS=-fPIC',
                 'BUILDMODE=static',
                 'CROSS=x86_64-w64-mingw32-', 'TARGET_SYS=Windows'])
)

void linkerConfig(BuildTarget it, Platform platform) {
    // TODO: decide whether to shell-string-escape-and-then-xml-entity-escape $projectDir
    it.linkerFlags += " -L&quot;$projectDir/jni/luajit/lib/${platform.toString().toLowerCase()}&quot; "
    if (it.os == Os.Linux) {
        it.cFlags += ' -D_FORTIFY_SOURCE=0 '
        it.cppFlags += ' -D_FORTIFY_SOURCE=0 '
    }
}

apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

jnigen {
    sharedLibName = 'luajit'

    all {
        cppExcludes = ['luajit/**/*']
        cExcludes = ['luajit/**/*']
        libraries += ' -lm  -lluajit '
        headerDirs = ['../../jni/luajava', 'luajit/src', 'mod']
        cFlags += ' -DLUAJIT_ENABLE_LUA52COMPAT'
        cppFlags += ' -DLUAJIT_ENABLE_LUA52COMPAT'
    }

    add(Linux, x64, x86, {
        linkerConfig(it, Platform.Linux64)
    })
    add(Linux, x64, ARM, {
        linkerConfig(it, Platform.AArch64)
    })
    add(Windows, x64, x86, {
        linkerConfig(it, Platform.Win64)
    })
    // Removed Android, iOS, MacOS, robovm, and other extra targets for minimal desktop build
}


// Removed MacOS, Android, iOS, and other extra build dependencies for minimal desktop build
tasks.jnigenBuildLinux64.dependsOn(tasks.buildLuaLinux64)
tasks.jnigenBuildLinuxARM64.dependsOn(tasks.buildLuaAArch64)
tasks.jnigenBuildWindows64.dependsOn(tasks.buildLuaWin64)

void addPatchElfTask(String platform) {
    String target = "patchElf${platform}"
    String folder = "libs/${platform.toLowerCase()}"
    tasks.register(target) {
        doLast {
            String file = projectDir.toPath().resolve(folder).toFile().listFiles(new FilenameFilter() {
                @Override
                boolean accept(File file, String s) {
                    return s.endsWith('.so')
                }
            })[0].toPath().toAbsolutePath().toString()
            List<String> command = new ArrayList<>()
            command.add('patchelf')
            for (String symbol : ['dlclose',
                                  'dlerror',
                                  'dlopen',
                                  'dlsym',
                                  'exp',
                                  'log',
                                  'log2',
                                  'pow']) {
                command.add('--clear-symbol-version')
                command.add(symbol)
            }
            command.add(file)
            logger.lifecycle('$ patchelf --version')
            exec {
                workingDir folder
                commandLine new ArrayList<>(['patchelf', '--version'])
            }
            logger.lifecycle('$ ' + command.join(' '))
            exec {
                workingDir folder
                commandLine command
            }
        }
    }
}


// Removed patchElf tasks for non-desktop targets and only kept relevant finalizedBy for supported platforms

apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

artifacts {
    instrumentedJars(jar)
    desktopNatives(jnigenJarNativesDesktop)
}

tasks.named('jar') {
    manifest {
        attributes('Automatic-Module-Name': 'party.iroiro.luajava.luajit')
    }
}

tasks.jnigen.dependsOn(tasks.build)
